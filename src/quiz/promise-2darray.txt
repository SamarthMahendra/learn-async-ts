- Extract the code in the setTimeout function and replace the setTimeout function  with the extracted code. Then run the main script. 
- Is there a difference in the flow of execution from when the code was in the setTimeout function?
- Is the flow of execution in both these examples different from the flow of execution with the examples using the fetch() API, which also returns a promise? 
- If yes, explain the code execution difference. Add your explanation to this file.



1. After extracting the code from setTimeout:
I removed the setTimeout so that the summing logic now runs immediately in the promise executor instead of waiting for the next event loop cycle.

2. Is there a difference in the flow of execution?
Yes. With setTimeout, the computation is delayed as a macrotask, but without it, the computation happens immediately (synchronously) during the promise creationâ€”even though the .then() callbacks still run as microtasks.

3. Is the flow of execution different from using the fetch() API?
Yes. The fetch() API waits for an external network response to resolve its promise, whereas our examples run CPU-bound tasks with timing determined by the event loop.

4. Explanation of the code execution difference:

With setTimeout: Code runs later as a macrotask.
Direct execution: Code runs immediately (synchronously) in the promise executor, though promise callbacks are still asynchronous.
Using fetch(): Promise resolution depends on I/O (network response), making its asynchrony fundamentally different.





